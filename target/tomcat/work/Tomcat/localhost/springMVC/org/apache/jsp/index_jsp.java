/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2021-04-15 08:08:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>首页</title>\n");
      out.write("    <script src=\"js/jquery.min.js\"></script>   <!--引入外部js资源-->\n");
      out.write("    <script>\n");
      out.write("        //页面的资源加载完成后，绑定单击事件\n");
      out.write("    $(function () {\n");
      out.write("        $(\"#btn\").click(function () {\n");
      out.write("            //发送ajax请求\n");
      out.write("            $.ajax({\n");
      out.write("                url:\"test/ajax\",\n");
      out.write("                contentType:\"application/json;charset=UTF-8\",//传入的数据类型与编码格式\n");
      out.write("                data:'{\"name\":\"黄海\",\"sex\":\"男\"}',  //请求数据,格式必须这么写，否则就报错\n");
      out.write("                dataType:\"json\",  //响应数据的类型\n");
      out.write("                type:\"post\",\n");
      out.write("                success:function (data) {   //响应成功的回调函数\n");
      out.write("                    alert(data.name+\"  \"+data.sex)\n");
      out.write("                },\n");
      out.write("                error:function () {  //响应失败的回调函数\n");
      out.write("                    alert(\"出错啦！。。。。。\")\n");
      out.write("                },\n");
      out.write("            })\n");
      out.write("        })\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    //第二种ajax方式（更简单）\n");
      out.write("/*        $(function () {\n");
      out.write("            $(\"#btn\").click(function () {\n");
      out.write("                $.post(\"test/ajax\",{\"name\":\"黄海\",\"sex\":\"男\"},function (data) {\n");
      out.write("                        alert(data.name);\n");
      out.write("                },\"json\")\n");
      out.write("            })\n");
      out.write("        })*/\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h2>Hello World!</h2>\n");
      out.write("<!--这里所有的路径都不能在前面写“/”，否则报错，因为视图解析器会给你解析到jsp去-->\n");
      out.write("<a href=\"test/hello?username=hh&password=123\">简单的参数（基本类型）绑定</a>\n");
      out.write("<br/>\n");
      out.write("<form action=\"test/account\" method=\"post\">\n");
      out.write("    姓名：<input type=\"text\" name=\"username\"/> <br/>  <!--所有的数据都会自动匹配封装，要求是必须参数名称一样-->\n");
      out.write("    密码：<input type=\"text\" name=\"password\"/> <br/>\n");
      out.write("    资金：<input type=\"text\" name=\"money\"/> <br/>\n");
      out.write("    他爸爸：<input type=\"text\" name=\"user.name\"/> <br/> <!--springMVC会自动识别对象中有的对象，并将数据自动封装，名称必须一样-->\n");
      out.write("    性别：<input type=\"text\" name=\"user.sex\"/> <br/>\n");
      out.write("    ");
      out.write("  <!--将数据封装到创建的一个键为one的map集合中去-->\n");
      out.write("    <input type=\"submit\" value=\"提交\" /> <br/>\n");
      out.write("</form>\n");
      out.write("<a href=\"test/getRequest\">获取Servlet原生的API</a><br/>\n");
      out.write("<a href=\"test/testRequestParam?name=黄海\">测试注解@RequestParam</a><br/>\n");
      out.write("\n");
      out.write("<form action=\"test/testRequestBody\" method=\"post\">\n");
      out.write("    姓名：<input type=\"text\" name=\"username\"/> <br/>\n");
      out.write("    密码：<input type=\"text\" name=\"password\"/> <br/>\n");
      out.write("    <input type=\"submit\" value=\"提交\" /> <br/>\n");
      out.write("</form>\n");
      out.write("<a href=\"test/testPathVariable/sss傻子\">测试注解@PathVariable</a><br/>\n");
      out.write("<a href=\"test/requestHeader\">测试注解@RquestHeader</a><br/>\n");
      out.write("<a href=\"test/cookieValue\">测试注解@CookieValue</a><br/>\n");
      out.write("<a href=\"test/modelAttribute?uname=人生\">测试注解@ModelAttribute</a><br/>\n");
      out.write("<a href=\"test/sessionAttribute\">测试注解@sessionAttribute</a><br/>\n");
      out.write("<a href=\"test/getSessionAttribute\">用ModelMap的get方法取出域中的值</a><br/>\n");
      out.write("<a href=\"test/deleteSessionAttribute\">清除session域中的值</a><br/>\n");
      out.write("<a href=\"test/ForwardOrRedirectAndRedirect\">测试字符串形式的转发或重定向</a><br/>\n");
      out.write("<a href=\"test/ModelAndView\">测试ModelAndView类</a><br/>\n");
      out.write("\n");
      out.write("<center><button id=\"btn\">发送ajax请求</button></center><br>\n");
      out.write("\n");
      out.write("<a href=\"test/myExceptionResolver\">测试异常处理器</a><br/><br/><br/>\n");
      out.write("\n");
      out.write("<form action=\"test/fileUpload\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("    选择要上传的文件：<input type=\"file\" name=\"upload\"/>\n");
      out.write("                <input type=\"submit\" value=\"上传\"/>\n");
      out.write("\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
